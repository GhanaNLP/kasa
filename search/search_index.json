{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Kasa","text":"<p>English to Twi translation library/system being put together by the Ghana NLP team.</p>"},{"location":"#quickstart","title":"Quickstart","text":"<p>Install Kasa directly from online link:</p> <ol> <li><code>pip install git+https://github.com/GhanaNLP/kasa</code></li> </ol> <p>When editing Kasa locally, it is helpful to install from a local copy of Kasa instead:</p> <ol> <li> <p><code>git clone https://github.com/GhanaNLP/kasa</code></p> </li> <li> <p><code>cd kasa</code></p> </li> <li> <p><code>pip install .</code></p> </li> </ol> <p>The <code>examples/</code> folder of the repo constains examples you can directly run to test various functionalities, e.g., </p> <p><code>python load_and_preprocess_parallel_dataset.py</code></p> <p>This may require obtaining some data files and accordingly passing the right paths to the methods in <code>load_and_preprocess_parallel_dataset.py</code>. All this should be self-explanatory if you look at the code.</p>"},{"location":"#data-files","title":"Data Files","text":"<p>You will need to download two corpus (English and Twi) into a data folder on your local machine in order to run the examples, using the link below.</p> <p><code>https://www.kaggle.com/azunre/jw300entw</code></p>"},{"location":"#contributing","title":"Contributing","text":"<p>Refer to the CONTRIBUTING.md file for more information on how to contribute to this project.</p>"},{"location":"#notebooks","title":"Notebooks","text":"<p>Usually, we start our work by implementing it directly as a Jupyter Python notebook and host it on Kaggle runtime so team members can play around with ideas. Below is a list of the notebooks we have worked on so far, as well as links to where they are hosted on Kaggle so . They are located in the <code>notebooks/</code> subfolder of this repo, and the hope is to convert all useful methods they contain into refined methods within the <code>Kasa</code> library.</p> <p>*)The <code>data_processing.ipynb</code> preprocessing notebook is also loaded on kaggle @ https://www.kaggle.com/azunre/ghananlp-kasa-preprocessing-word2vec-v0-1 </p> <p>*)The <code>ghananlp-kasa-retrieval-v0-1.ipynb</code> retrieval \"proof-of-concept\" notebook is also loaded on kaggle @ https://www.kaggle.com/azunre/ghananlp-kasa-retrieval-v0-</p> <p>*)The <code>eng_twi_transformer.ipynb</code> transformer-based english-to-twi NMT model notebook is also loaded on kaggle @  https://www.kaggle.com/azunre/ghananlp-kasa-nmt-transformer-v0-1</p>"},{"location":"#description-of-key-files","title":"Description of Key Files","text":"<p>It is helpful to know the function of the following files when contributing:</p> <p>*)<code>HISTORY.md</code> -- what functionality was added during each version/release, and what is planned to be added next/in the near future.</p> <p>*)<code>setup.py</code> -- specify dependencies for added methods here</p> <p>*)<code>__init__.py</code> -- * import specification file, does not exist for now...</p> <p>*)<code>MANIFEST.in</code> -- (yet to be added) this will be used to make sure required files are copied over when the library is installed (no such requirement yet)</p>"},{"location":"#need-more-information-on-syntax-for-classes-methods-etc","title":"Need More Information on Syntax for Classes, Methods, etc?","text":"<p>The method <code>dir</code> is very useful for debugging your classes and methods, example:</p> <ol> <li><code>from Kasa import Preprocessing</code></li> <li><code>dir(Preprocessing)</code></li> </ol> <p>If you need further information, either contact Ghana NLP members directly, or see a repo on github like this one:</p> <p>https://github.com/algorine/simon</p>"},{"location":"changelog/","title":"Change Log","text":""},{"location":"changelog/#vnext","title":"vNEXT","text":"<ul> <li>retrieval system</li> <li>word2vec embeddings</li> <li>neural translation with Transformers</li> </ul>"},{"location":"changelog/#v001","title":"v0.0.1","text":"<ul> <li>basic preprocessing Twi functionality</li> </ul>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2020 Ghana NLP</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"api-reference/khaya/khaya_interface/","title":"KhayaInterface","text":""},{"location":"api-reference/khaya/khaya_interface/#khaya_interface.KhayaInterface","title":"KhayaInterface","text":"<pre><code>KhayaInterface(api_key: str, base_url: Optional[str] = 'https://translation-api.ghananlp.org')\n</code></pre> <p>KhayaInterface is a class that provides a high-level interface to the Khaya API. It provides methods for translating text, transcribing audio, and synthesizing speech.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The API key to use for authenticating requests to the Khaya API.</p> required <code>Optional[str]</code> <p>The base URL of the Khaya API. Default is \"https://translation-api.ghananlp.org\".</p> <code>'https://translation-api.ghananlp.org'</code> <p>Returns:</p> Type Description <p>An instance of the KhayaInterface class.</p> <p>Example:</p> <pre><code>from khaya.khaya_interface import KhayaInterface\n\nimport os\n\n# Initialize the Khaya API interface with your API key assuming you have one saved \n# in an environment variable called KHAYA_API_KEY\n\napi_key = os.environ.get(\"KHAYA_API_KEY\")\n\nkhaya = KhayaInterface(api_key)\n\n# Translate text from English to Twi\ntranslation_response = khaya.translate(\"Hello, how are you?\", \"en-tw\")\nprint(translation_response.json())\n\n# Transcribe an audio file\nasr_response = khaya.asr(\"path/to/audio/file.wav\", \"tw\")\nprint(asr_response.json())\n\n# Synthesize speech\ntts_response = khaya.tts(\"Hello, how are you?\", \"en\")\n# Save the synthesized speech to a file\nwith open(\"output.mp3\", \"wb\") as f:\n    f.write(tts_response.content)\n</code></pre> <p>Methods:</p> Name Description <code>asr</code> <p>Get the transcription of an audio file from a given language.</p> <code>translate</code> <p>Translate text from one language to another.</p> <code>tts</code> <p>Synthesize speech from text.</p> Source code in <code>khaya/khaya_interface.py</code> <pre><code>def __init__(self, api_key: str, base_url: Optional[str] = \"https://translation-api.ghananlp.org\"):\n    self.api_key = api_key\n    self.base_url = base_url\n    self.translation_api = TranslationApi(api_key, base_url)\n    self.asr_api = AsrApi(api_key, base_url)\n    self.tts_api = TtsApi(api_key, base_url)\n</code></pre>"},{"location":"api-reference/khaya/khaya_interface/#khaya_interface.KhayaInterface(api_key)","title":"<code>api_key</code>","text":""},{"location":"api-reference/khaya/khaya_interface/#khaya_interface.KhayaInterface(base_url)","title":"<code>base_url</code>","text":""},{"location":"api-reference/khaya/khaya_interface/#khaya_interface.KhayaInterface-functions","title":"Functions","text":""},{"location":"api-reference/khaya/khaya_interface/#khaya_interface.KhayaInterface.asr","title":"asr","text":"<pre><code>asr(audio_file_path: str, language: str = 'tw') -&gt; Response\n</code></pre> <p>Get the transcription of an audio file from a given language.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The path to the audio file to transcribe.</p> required <code>str</code> <p>The language of the audio file. Default is \"tw\".</p> <code>'tw'</code> <p>Returns:</p> Type Description <code>Response</code> <p>A Response object containing the transcription of the audio file.</p> Source code in <code>khaya/khaya_interface.py</code> <pre><code>def asr(self, audio_file_path: str, language: str = \"tw\") -&gt; Response:\n    \"\"\"\n    Get the transcription of an audio file from a given language.\n\n    Args:\n        audio_file_path: The path to the audio file to transcribe.\n        language: The language of the audio file. Default is \"tw\".\n\n    Returns:\n        A Response object containing the transcription of the audio file.\n    \"\"\"\n    return self.asr_api.transcribe(audio_file_path, language)\n</code></pre>"},{"location":"api-reference/khaya/khaya_interface/#khaya_interface.KhayaInterface.asr(audio_file_path)","title":"<code>audio_file_path</code>","text":""},{"location":"api-reference/khaya/khaya_interface/#khaya_interface.KhayaInterface.asr(language)","title":"<code>language</code>","text":""},{"location":"api-reference/khaya/khaya_interface/#khaya_interface.KhayaInterface.translate","title":"translate","text":"<pre><code>translate(text: str, language_pair: str = 'en-tw') -&gt; Response\n</code></pre> <p>Translate text from one language to another.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The text to translate.</p> required <code>str</code> <p>The language pair to translate the text to. Default is \"en-tw\".</p> <code>'en-tw'</code> <p>Returns:</p> Type Description <code>Response</code> <p>A Response object containing the translated text.</p> Source code in <code>khaya/khaya_interface.py</code> <pre><code>def translate(self, text: str, language_pair: str = \"en-tw\") -&gt; Response:\n    \"\"\"\n    Translate text from one language to another.\n\n    Args:\n        text: The text to translate.\n        language_pair: The language pair to translate the text to. Default is \"en-tw\".\n\n    Returns:\n        A Response object containing the translated text.\n    \"\"\"\n\n    return self.translation_api.translate(text, language_pair)\n</code></pre>"},{"location":"api-reference/khaya/khaya_interface/#khaya_interface.KhayaInterface.translate(text)","title":"<code>text</code>","text":""},{"location":"api-reference/khaya/khaya_interface/#khaya_interface.KhayaInterface.translate(language_pair)","title":"<code>language_pair</code>","text":""},{"location":"api-reference/khaya/khaya_interface/#khaya_interface.KhayaInterface.tts","title":"tts","text":"<pre><code>tts(text: str, lang: str) -&gt; Response\n</code></pre> <p>Synthesize speech from text.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The text to synthesize.</p> required <code>str</code> <p>The language of the text. Default is \"tw\".</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A Response object containing the synthesized speech.</p> Source code in <code>khaya/khaya_interface.py</code> <pre><code>def tts(self, text: str, lang: str) -&gt; Response:\n    \"\"\"\n    Synthesize speech from text.\n\n    Args:\n        text: The text to synthesize.\n        lang: The language of the text. Default is \"tw\".\n\n    Returns:\n        A Response object containing the synthesized speech.\n    \"\"\"\n    return self.tts_api.synthesize(text, lang)\n</code></pre>"},{"location":"api-reference/khaya/khaya_interface/#khaya_interface.KhayaInterface.tts(text)","title":"<code>text</code>","text":""},{"location":"api-reference/khaya/khaya_interface/#khaya_interface.KhayaInterface.tts(lang)","title":"<code>lang</code>","text":""},{"location":"contributing/","title":"Contributing","text":"<p>Please first clone this repo to your local machine, using a command line tool such as Cygwin or Anaconda Prompt:</p> <p><code>git clone https://github.com/GhanaNLP/kasa</code></p> <p>Create a branch for your contributions, and check it out:</p> <ol> <li> <p><code>git branch &lt;your-branch-name&gt;</code></p> </li> <li> <p><code>git checkout &lt;your-branch-name&gt;</code></p> </li> </ol> <p>Try to pick a branch name that described what you are planning to add to the library, see current branch names in this repo for ideas.</p> <p>Write your code, test it and then push to your branch:</p> <ol> <li><code>git push origin &lt;your-branch-name&gt;</code></li> </ol> <p>Create a pull request using the online github repo page, making sure to include a senior member of the team to review your work before merging it into the master branch of the repo. </p> <p>Never push changes to master!!!</p>"}]}